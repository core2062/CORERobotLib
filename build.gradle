plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2019.1.1"
}

model {
    repositories {
        libs(PrebuiltLibraries) {
            // seasocks {
            //     headers.srcDir "3rdparty/seasocks/src/main/c"
            //     binaries.withType(StaticLibraryBinary) {
            //         staticLibraryFile = file("3rdparty/seasocks/Linux/arm/libseasocks.a")
            //     }
            // }
            googleTest {
                headers.srcDir "3rdparty/googletest/googletest/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("3rdparty/googletest/googletest/" + getPlatformPath(targetPlatform) + "/libgtest.a")
                }
            }
            googleTestMain {
                headers.srcDir "3rdparty/googletest/googletest/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("3rdparty/googletest/googletest/" + getPlatformPath(targetPlatform) + "/libgtest_main.a")
                }
            }
            googleMock {
                headers.srcDir "3rdparty/googletest/googlemock/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("3rdparty/googletest/googlemock/" + getPlatformPath(targetPlatform) + "/libgmock.a")
                }
            }
            googleMockMain {
                headers.srcDir "3rdparty/googletest/googlemock/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("3rdparty/googletest/googlemock/" + getPlatformPath(targetPlatform) + "/libgmock_main.a")
                }
            }
            json {
                headers.srcDir "3rdparty/json/src"
            }
        }
    }
    components {
        // zlib(NativeLibrarySpec) {
        //     targetPlatform wpi.platforms.roborio
        //     sources.cpp {
        //         source {
        //             srcDir "3rdparty/zlib"
        //             include "**/*.cpp"
        //         }
        //         exportedHeaders {
        //             srcDir "3rdparty/zlib"
        //         }
        //     }
        // }
        // seasocks(NativeLibrarySpec) {
        //     targetPlatform wpi.platforms.roborio
        //     sources.cpp {
        //         source {
        //             srcDirs "3rdparty/seasocks/src/main/c","3rdparty/seasocks"
        //             include "**/*.cpp"
        //         }
        //         exportedHeaders {
        //             srcDirs "3rdparty/seasocks/src/main/c","3rdparty/seasocks"
        //         }
        //     }
        //     binaries.withType(StaticLibraryBinary) {
        //         staticLibraryFile = file("3rdparty/seasocks/Linux/arm/libseasocks.a")
        //     }
        //     binaries.all {
        //         lib library : 'zlib', linkage : 'static'
        //     }
        //     binaries.withType(SharedLibraryBinarySpec) {
        //         buildable = false
        //     }
        //     wpi.deps.vendor.cpp(it)
        // }   
        CORERobotLib(NativeLibrarySpec) {
            targetPlatform wpi.platforms.roborio
            sources.cpp {
                source {
                    srcDir "src"
                    include "**/*.cpp"
                    exclude "CORESimulation", "COREDashboard"
                    // srcDir "3rdparty/seasocks/src/main/c"
                }
                exportedHeaders {
                    srcDir "src"
                    srcDir "3rdparty/json/src/"
                    // srcDir "3rdparty/seasocks/src/main/c"
                }
            }
            // binaries.all {
            //     lib library : 'seasocks', linkage : 'static'
            // }
            binaries.withType(SharedLibraryBinarySpec) {
                buildable = false
            }
            useLibrary(it, "wpilib")
            wpi.deps.vendor.cpp(it)
        }
    }
}

task copyToLibDir(type: Copy) {
    from "build/libs/cORERobotLib/static"
    into "lib"
}

build.finalizedBy copyToLibDir

def getPlatformPath(Platform platform) {
    if (platform.operatingSystem.windows) {
        return "Windows/amd64/"
    } else if (platform.architecture.arm) {
        return "Linux/arm/"
    } else {
        return "Linux/amd64/"
    }
}

