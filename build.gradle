plugins {
    id "cpp"
    id "jaci.openrio.gradle.GradleRIO" version "2018.01.22"
}

apply plugin: "cpp"
apply plugin: 'eclipse'

model {
    repositories {
        libs(PrebuiltLibraries) {
            seasocks {
                headers.srcDir "3rdparty/seasocks/src/main/c"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("3rdparty/seasocks/" + getPlatformPath(targetPlatform) + "/libseasocks.a")
                }
            }
            googleTest {
                headers.srcDir "3rdparty/googletest/googletest/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("3rdparty/googletest/googletest/" + getPlatformPath(targetPlatform) + "/libgtest.a")
                }
            }
            googleTestMain {
                headers.srcDir "3rdparty/googletest/googletest/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("3rdparty/googletest/googletest/" + getPlatformPath(targetPlatform) + "/libgtest_main.a")
                }
            }
            googleMock {
                headers.srcDir "3rdparty/googletest/googlemock/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("3rdparty/googletest/googlemock/" + getPlatformPath(targetPlatform) + "/libgmock.a")
                }
            }
            googleMockMain {
                headers.srcDir "3rdparty/googletest/googlemock/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("3rdparty/googletest/googlemock/" + getPlatformPath(targetPlatform) + "/libgmock_main.a")
                }
            }
            json {
                headers.srcDir "3rdparty/json/src"
            }
        }
    }
    components {
        CORERobotLib(NativeLibrarySpec) {
            targetPlatform 'roborio'
            sources.cpp {
                source {
                    srcDir "src"
                    include "**/*.cpp"
                    exclude "WaypointFollower", "CORESimulation"
                }
                exportedHeaders {
                    srcDir "src"
                }
                lib library: "json", linkage: "api"
                lib library: "seasocks", linkage: "static"
                lib library: "ctre"
                lib library: "navx"
                lib library: "wpilib"
                lib library: "ctre"
            }
            binaries.withType(SharedLibraryBinarySpec) {
                buildable = false
            }
        }
    }
}

task copyToLibDir(type: Copy) {
    from "build/libs/cORERobotLib/static"
    into "lib"
}

build.finalizedBy copyToLibDir

def getPlatformPath(Platform platform) {
    if (platform.operatingSystem.windows) {
        return "Windows/amd64/"
    } else if (platform.architecture.arm) {
        return "Linux/arm/"
    } else {
        return "Linux/amd64/"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}
