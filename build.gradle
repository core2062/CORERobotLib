plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2022.1.1"
}

model {
    repositories {
        libs(PrebuiltLibraries) {
            zlib {
                binaries.withType(SharedLibraryBinarySpec) {
                    linker.args ("-L/Users/Public/robotlib2020",'-lz')
                }
            }
        }
    }
    components { 
        CORERobotLib(NativeLibrarySpec) {
            targetPlatform wpi.platforms.roborio
            sources.cpp {
                source {
                    srcDir "src"
                    srcDir "3rdparty/seasocks/src/main/c"
                    srcDir "3rdparty/seasocks/src/main/web"
                    include "**/*.cpp"
                    exclude "CORESimulation"
                }
                exportedHeaders {
                    srcDir "src"
                    srcDir "3rdparty/json/src/"
                    srcDir "3rdparty/zlib"
                    srcDir "3rdparty/seasocks/src/main/c"
                }
            }
            binaries.withType(SharedLibraryBinarySpec) {
                buildable = false
            }
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
    }
}

task copyToLibDir(type: Copy) {
    from "build/libs/cORERobotLib/static"
    into "lib"
}

build.finalizedBy copyToLibDir

def getPlatformPath(Platform platform) {
    if (platform.operatingSystem.windows) {
        return "Windows/amd64/"
    } else if (platform.architecture.arm) {
        return "Linux/arm/"
    } else {
        return "Linux/amd64/"
    }
}
